<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xidian.meiping.dao.TrainerMapper" >
  <resultMap id="BaseResultMap" type="com.xidian.meiping.entity.Trainer" >
    <id column="trainer_id" property="trainerId" jdbcType="INTEGER" />
    <result column="price" property="price" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="rend_trainer_log_id" property="rendTrainerLogId" jdbcType="INTEGER" />
    <result column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="member_name" property="memberName" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="day_number" property="dayNumber" jdbcType="INTEGER" />
    <result column="trainer_name" property="trainerName" jdbcType="VARCHAR" />

  </resultMap>
  <sql id="Base_Column_List" >
    trainer_id, price, status, rend_trainer_log_id,member_id
  </sql>
  <sql id="Base_Column_List_2" >
    trainer.trainer_id, trainer.price, trainer.status, trainer.rend_trainer_log_id,
    trainer.member_id,employee.name as trainer_name
  </sql>
  <sql id="Base_Column_List_Sp" >
    trainer.trainer_id, trainer.price, trainer.status, trainer.rend_trainer_log_id,trainer.member_id,
    member.name as member_name, rtl.start_time as start_time,rtl.end_time as end_time,
    datediff(rtl.end_time,rtl.start_time) as day_number,employee.name as trainer_name
  </sql>
  <select id="selectAll"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List_2" />
    from trainer,employee
    where trainer.trainer_id = employee.id
  </select>
  <select id="selectAllWithMemberId"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List_Sp" />
    from trainer,member,rend_trainer_log as rtl,employee
    where trainer.rend_trainer_log_id = rtl.id
    and trainer.trainer_id = employee.id
    and trainer.member_id = member.id
    and trainer.status = 1
  </select>
  <select id="searchByMemberIdAndTrainerId"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List_Sp" />
    from trainer,member,rend_trainer_log as rtl,employee
    where trainer.rend_trainer_log_id = rtl.id
    and trainer.trainer_id = employee.id
    and trainer.member_id = member.id
    and trainer.status = 1
    <if test="memberId != null" >
      and trainer.member_id = #{memberId,jdbcType=INTEGER}
    </if>
    <if test="trainerId != null" >
     and  trainer.trainer_id = #{trainerId,jdbcType=INTEGER}
    </if>
  </select>
  <select id="selectByMemberId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from trainer
    where member_id = #{memberId,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from trainer
    where trainer_id = #{trainerId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from trainer
    where trainer_id = #{trainerId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xidian.meiping.entity.Trainer" >
    insert into trainer (trainer_id, price, status, 
      rend_trainer_log_id,member_id)
    values (#{trainerId,jdbcType=INTEGER}, #{price,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{rendTrainerLogId,jdbcType=INTEGER},#{memberId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.xidian.meiping.entity.Trainer" >
    insert into trainer
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="trainerId != null" >
        trainer_id,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="rendTrainerLogId != null" >
        rend_trainer_log_id,
      </if>
      <if test="memberId != null" >
        member_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="trainerId != null" >
        #{trainerId,jdbcType=INTEGER},
      </if>
      <if test="price != null" >
        #{price,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="rendTrainerLogId != null" >
        #{rendTrainerLogId,jdbcType=INTEGER},
      </if>
      <if test="memberId != null" >
        #{memberId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xidian.meiping.entity.Trainer" >
    update trainer
    <set >
      <if test="price != null" >
        price = #{price,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="rendTrainerLogId != null" >
        rend_trainer_log_id = #{rendTrainerLogId,jdbcType=INTEGER},
      </if>
      <if test="memberId != null" >
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
    </set>
    where trainer_id = #{trainerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xidian.meiping.entity.Trainer" >
    update trainer
    set price = #{price,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      rend_trainer_log_id = #{rendTrainerLogId,jdbcType=INTEGER}
      member_id = #{memberId,jdbcType=INTEGER}
    where trainer_id = #{trainerId,jdbcType=INTEGER}
  </update>
</mapper>